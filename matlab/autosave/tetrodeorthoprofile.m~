%
%function [TetrodeData]=tetrodespikedetect(Tetrode,Thresh,T,fl,fh,US,DeadTime,Disp)
%
%   FILE NAME   : TETRODE SPIKE DETECT
%   DESCRIPTION : Detects action potentials across 4 channel tetrode. Uses
%                 the following transformed signal to detect spikes:
%
%                 Z(t)=   Z0(t).^2 .* Z2(t) = P(t) .* Z2(t)
%
%                 where P=Z0(t).^2 is the orthonormal power profiles (for each 
%                 channel), Z1(t)= inv(chol(C1))*X, 
%                 Z2(t) = inv(chol(C2))*X2 is the normalized acceleration
%                 profile, X2 is the second derivative, and C2 is the
%                 covariance of X2.
%
%   Tetrode     : .mat file that contains 4 channel of continous waveforms
%                 in a tetrode (4 x number of samples)
%   Thresh      : Threshold for spike detecting; Default=5 
%	T           : Spike Snippet window size (msec) (Default==3 msec)
%	fl          : Lower cutoff frequency for bandpass filter; Default=300
%	fh          : Higher cutoff frequency for bandpass filter; Default=5000
%   US          : Upsampling factor 
%   DeadTime    : Minimum time between adjecent spikes (msec) - Secondary 
%                 spikes within this time window are not detected
%                 (Default==0.5 msec)
%   ND          : Derrivative order (ND=1 for velocity, ND=2 for
%                 acceleration)
%   Disp        : Display output results (Default=='n')
%
%RETURNED PARAMETERS
%
%	TetrodeData : Output Tetrode Data Structure
%                 .Snip - Snips for detected spikes
%                 .Zsnip- Transformed snips for detected spikes
%                 .Zhat - Transformed detection profile - note that
%                         Zhat is the sum of Zsnips across channls (i.e.,
%                         sum( TetrodeData.ZSnip(:,:,:),1) )
%                 .Spet - Spike event times (sample number)
%                 .Fs   - Sampling rate (Hz)
%                 .C    - Tetrode covariance matrix
%                 .C2   - Tetrode second derivative covaraince matrix 
%                
% (C) C.Chen & M. Escabi, July 2008
%
function [TetrodeData]=tetrodespikedetect(Tetrode,Thresh,T,fl,fh,US,DeadTime,ND,Disp)

%Input Arguments
if nargin<9
    Disp='n';
end
if nargin<8
    ND=2;
end
if nargin<7
    DeadTime=0.5;
end
if nargin<6
    US=4;
end
if nargin<5
   fh=5000;
end
if nargin<4
    fl=300;
end
if nargin<3
   T=3;
end
if nargin<2
   Thresh=[5 5];
end   
if length(Thresh)==1
    Thresh=Thresh*ones(1,2);
end

%Filter continous waveform
Fs=Tetrode(1).Fs;
H=bandpass(fl,fh,250,Fs,40,'n');
L=(length(H)-1)/2;
Y=[];
for i=1:4
    disp(['Filtering Channel ' int2str(i)])
    X=conv(Tetrode(i).ContWave,H);
    N=length(X);
    X=X(L+1:N-L);
    Y(i,:)=X;
end 
clear Tetrode

%Computig Covariance Matrix
[C]=covblocked(Y',US,0,1024*512);       %Covariance
[C2]=covblocked(Y',US,ND,1024*512);      %Covariance of diff(X,ND) - 2nd derivative waveform for ND=2

%C=inv(C);                               %Inverese Covariance Matrix
C=inv(chol(C,'lower'));                 %Inverse Chelesky Decomposition of Covariance
C2=inv(chol(C2,'lower'));               %Inverse Chelesky Decomposition of Covariance

%Initialize Variables
Ns=ceil(T/2/1000*Fs);   %Total number of samples for spet = 2*Ns+1
L=Fs*US;                %Block Size - # samples
index=[];
spet=[];
Ytemp=[];
count=1;
TetrodeData.Snip=zeros(4,2*Ns*US+1,10000);
TetrodeData.ZSnip=zeros(4,2*Ns*US+1,10000);
TetrodeData.Zhat=zeros(10000,2*Ns*US+1);
    
%Spike Detection - Calculate hyperelliptical threshold    
disp('Thresholding')
for k=1:ceil(length(Y)/L)

    %Interpolating Waveform Blocks
    if length(Y)-(k-1)*L<L   %Checking for Last Segment
        Ytemp=[];
        Yt=Y(:,(k-1)*L+1-Ns:length(Y));  %Adding Ns at left extreme to assure that all spikes are detected
    elseif k==1
        Yt=[zeros(4,Ns) Y(:,(k-1)*L+1:k*L+1+Ns)]; %Add zeros at begining of first block
    else
        Yt=Y(:,(k-1)*L+1-Ns:k*L+1+Ns); %Adding Ns at extremes to assure that all spikes are detected
    end
    M=length(Yt);
    for l=1:4
        Ytemp(l,:)=interp1(1:M,Yt(l,:),1:1/US:M-1/US,'spline');
    end
    clear Yt

    %Generating Energy Signal for Raw Waveform and 2nd Derrivative
    Y0=C*Ytemp;                         %C is the iverse Cholesky decompostion of the covariance matrix - "orthonormal"
    Y2=diff([zeros(4,ND) Ytemp],ND,2);  %ND Order Derivative
    Y2=C2*Y2;                           %C2 is the iverse Cholesky decompostion of the covariance matrix - "orthonormal"
    Z=Y0.*Y2.*Y0;                       %Transformed orthonormal power * acceleration feature space 
    Zhat=sum(Z,1);      

%    Y0=C*Ytemp;
%    A=diff([zeros(4,2) Y0],ND,2); 
%    Z=Y0.*A.*Y0;
%    Zhat=sum(Z,1);
    
    %Finding Samples that Exceed Threshold and Contain Peaks
    M=length(Zhat);
    NsU=Ns*US;      %Number of samples for upsampled snip = 2*NsU+1
    Mask=[zeros(1,NsU) ones(1,L*US) zeros(1,NsU)];    %Used to remove edge boundaries
    index=1+find(Mask(2:M-1) & Zhat(2:M-1)>Thresh(1)^2*Thresh(2) & abs(Zhat(2:M-1))>abs(Zhat(1:M-2)) & abs(Zhat(2:M-1))>abs(Zhat(3:M)) );;
    spet=[spet (k-1)*M+index - NsU];   %Corrects for offset due to NsU and + 1

    %Finding Spike & Feature Waveforms
    for l=1:length(index)
        TetrodeData.Snip(:,:,count)=Ytemp(:,index(l)-NsU:index(l)+NsU);
        TetrodeData.ZSnip(:,:,count)=Z(:,index(l)-NsU:index(l)+NsU);
        TetrodeData.Zhat(count,:)=Zhat(index(l)-NsU:index(l)+NsU);
        count=count+1;
    end
    TetrodeData.spet=spet;

    %Dynamically Allocating Data Arrays
    if ~isinteger(length(spet)/10000)
        LL=size(TetrodeData.Snip,3);
        Lceil=ceil(LL/10000)*10000;
        TetrodeData.Snip(:,:,LL+1:Lceil)=zeros(4,2*Ns*US+1,Lceil-LL);
        TetrodeData.ZSnip(:,:,LL+1:Lceil)=zeros(4,2*Ns*US+1,Lceil-LL);
        TetrodeData.Zhat(LL+1:Lceil,:)=zeros(Lceil-LL,2*Ns*US+1);
    end

    %Displaying Output Results
    if strcmp(Disp,'y')
        if k==1
            figure('Units','normalized','Position',[.1 .4 .8 .6])
        end
        
        subplot(511)
        Offset=(k-1)*M/Fs/US;
        plot(Offset++(1:length(Zhat))/Fs/US,Zhat)
        hold on
        plot(Offset + index/Fs/US,4000*ones(size(index)),'r+')
        axis([Offset Offset+M/Fs/US -5000 5000])
        hold off

        for k=1:4
            subplot(5,1,k+1)    
            Max=max(300,max(max(abs(Ytemp))));
            %plot(Offset+(1:length(Ytemp(k,:)))/Fs/US,Ytemp(k,:))
            plot(Offset+(1:length(Z(k,:)))/Fs/US,Z(k,:))
            hold on
            plot(Offset+index/Fs/US,0.8*Max*ones(size(index)),'r+')
            axis([Offset Offset+M/Fs/US -Max Max])
            hold off
            if k==4
               xlabel('Time (sec)') 
            end
            pause(0)
        end
    end
end